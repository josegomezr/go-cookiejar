// _ gotcha! this one I really wrote, look at the mess, of course it's mine.
package cookiejar

import (
	"bufio"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

func (e *entry) toCurlLine() string {
	withSubdomains := !e.HostOnly
	domain := e.Domain
	if withSubdomains {
		domain = "." + domain
	}
	if e.HttpOnly {
		domain = "#HttpOnly_" + domain
	}

	return fmt.Sprintf(
		"%s\t%t\t%s\t%t\t%d\t%s\t%s",
		domain,
		withSubdomains,
		e.Path,
		e.Secure,
		e.Expires.Unix(),
		e.Name,
		e.Value,
	)
}

const curlFileBanner = "# Netscape HTTP Cookie File\n" +
	"# https://curl.se/docs/http-cookies.html\n" +
	"# This file was generated by libcurl! Edit at your own risk.\n" +
	"###"

func (j *Jar) WriteAsCurl(w io.Writer) {
	fmt.Fprintln(w, curlFileBanner)
	for _, entries := range j.entries {
		for _, entry := range entries {
			fmt.Fprintln(w, entry.toCurlLine())
		}
	}
}

func (j *Jar) ReadFromCurl(r io.Reader) error {
	scanner := bufio.NewScanner(r)
	for scanner.Scan() {
		line := scanner.Text()
		if len(line) == 0 {
			continue
		}

		if line[0] == '#' && len(line) > 10 && line[0:10] != "#HttpOnly_" {
			continue
		}

		if err := j.addFromCurlLine(line); err != nil {
			return err
		}
	}

	return nil
}

func (j *Jar) addFromCurlLine(line string) error {
	var domain string
	var path string
	var name string
	var value string
	var withSubdomains string
	var httpOnly bool
	var secure string
	var expires int64

	_, err := fmt.Sscanf(
		line,
		"%s\t%s\t%s\t%s\t%d\t%s\t%s",
		&domain,
		&withSubdomains,
		&path,
		&secure,
		&expires,
		&name,
		&value,
	)
	secure = strings.ToLower(secure)
	withSubdomains = strings.ToLower(withSubdomains)

	if err != nil {
		return fmt.Errorf("error parsing cookie line: %w", err)
	}

	proto := "http"
	if secure == "true" {
		proto += "s"
	}

	if len(domain) > 10 && domain[0:10] == "#HttpOnly_" {
		domain = domain[10:]
		httpOnly = true
	}

	if withSubdomains == "true" && domain[0] != '.' {
		domain = "." + domain
	}

	url, err := url.Parse(fmt.Sprintf("%s://%s%s", proto, domain, path))

	if err != nil {
		return fmt.Errorf("error parsing domain-path in line: %w", err)
	}

	cookie := &http.Cookie{
		HttpOnly: httpOnly,
		Secure:   secure == "true",
		Path:     path,
		Expires:  time.Unix(expires, 0),
		Name:     name,
		Value:    value,
	}

	j.SetCookies(url, []*http.Cookie{cookie})

	return nil
}
